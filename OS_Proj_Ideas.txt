OS Project Ideas:
ShellCommandProcessing(): This is basically the shell :)
	Pass argc and **argv into this --> read all of them and do stuff
	If x, do y(); if w, do z(); etc.
while(1)
{
	ShellCommandProcessing()
}

Functions to Write:
	ls (-l)
	wc
	pipe functionality
	& (print pid of process corresponding to last subcommand)
	error handling
	input redirect for FIRST SUBCOMMAND
		errors: cannot find file
	output redirect for LAST SUBCOMMAND
		errors: cannot create file
	Sub-commands separated by pipes should provide the desired redirections. 
	Assuming N sub-commands, you can create N – 1 pipes in the parent process, 
	and let them be inherited by thechild processes every time fork() is executed. 
	Each process i other than the first should readfrom pipe i – 1, and each 
	process i other than the last should write into pipe i. 
	Remember that allprocesses, including the shell process itself, should close 
	all unused file descriptors to avoidundesired blocking reads on pipes.

	